%%
load_data
load('glcms1.mat');
load('glcms2.mat');
load('quadrants_mosaic1.mat');
load('quadrants_mosaic2.mat');
load('quadrants_mosaic3.mat');

%% Plot class1 in traning mosaic
%[class_1_row, class_1_col] = find(training_mask==1);
%tmp = zeros(size(mosaic1_train));
%for i = [class_1_row'; class_1_col']
%    tmp(i(1), i(2)) = mosaic1_train(i(1), i(2));
%end
%imshow(tmp, [])

%% Feature matrices
[class_1_row, class_1_col] = find(training_mask==1);
[class_2_row, class_2_col] = find(training_mask==2);
[class_3_row, class_3_col] = find(training_mask==3);
[class_4_row, class_4_col] = find(training_mask==4);
cls1 = zeros(length(class_1_row),4); %class 1 (values/observations, feature)
cls2 = zeros(length(class_2_row),4); %class 2
cls3 = zeros(length(class_3_row),4); %class 3
cls4 = zeros(length(class_4_row),4); %class 4
quadrant_images(1,:) = quadrants_mosaic1(1,:,1); % d1 Q1 feature image
quadrant_images(2,:) = quadrants_mosaic1(1,:,2); % d1 Q2 feature image
quadrant_images(3,:) = quadrants_mosaic1(1,:,2); % d1 Q2 feature image
quadrant_images(4,:) = quadrants_mosaic1(1,:,2); % d1 Q2 feature image
for i = 1:2
    quadrant_image = quadrant_images(i,:);
    %quadrant_image = mat2gray(quadrant_image);
    quadrant_image = reshape(quadrant_image, [512, 512]).'; % transpose because reshape creates column by column instead of row by row

    %Class1
    q = 1;
    for j = [class_1_row'; class_1_col']
        cls1(q,i) = quadrant_image(j(1), j(2));
        q = q + 1;
    end
    
    %Class2
    q = 1;
    for j = [class_2_row'; class_2_col']
        cls2(q,i) = quadrant_image(j(1), j(2));
        q = q + 1;
    end
    
    %Class3
    q = 1;
    for j = [class_3_row'; class_3_col']
        cls3(q,i) = quadrant_image(j(1), j(2));
        q = q + 1;
    end
    
    %Class4
    q = 1;
    for j = [class_4_row'; class_4_col']
        cls4(q,i) = quadrant_image(j(1), j(2));
        q = q + 1;
    end
end

%% Civariance matrix and means
cov_class1 = cov(cls1);
cov_class2 = cov(cls2);
cov_class3 = cov(cls3);
cov_class4 = cov(cls4);

means_class1 = mean(cls1);
means_class2 = mean(cls2);
means_class3 = mean(cls3);
means_class4 = mean(cls4);

%%
x1 = [quadrants_mosaic1(1,:,1); quadrants_mosaic1(1,:,2)];
x2 = [quadrants_mosaic2(1,:,1); quadrants_mosaic2(1,:,2)];
x3 = [quadrants_mosaic3(1,:,1); quadrants_mosaic3(1,:,2)];
%%
numVar = 4;

% Mosaic 1
res1 = zeros(512*512,1);
for i = 1:(512*512)
    pixel = x1(:,i);
    p1 = predict(pixel, cov_class1, means_class1, numVar);
    p2 = predict(pixel, cov_class2, means_class2, numVar);
    p3 = predict(pixel, cov_class3, means_class3, numVar);
    p4 = predict(pixel, cov_class4, means_class4, numVar);
    P = [p1, p2, p3, p4];
    [M, I] = max(P);
    res1(i) = I;
end

% Mosaic 2
res2 = zeros(512*512,1);
for i = 1:(512*512)
    pixel = x2(:,i);
    p1 = predict(pixel, cov_class1, means_class1, numVar);
    p2 = predict(pixel, cov_class2, means_class2, numVar);
    p3 = predict(pixel, cov_class3, means_class3, numVar);
    p4 = predict(pixel, cov_class4, means_class4, numVar);
    P = [p1, p2, p3, p4];
    [M, I] = max(P);
    res2(i) = I;
end

% Mosaic 3
res3 = zeros(512*512,1);
for i = 1:(512*512)
    pixel = x3(:,i);
    p1 = predict(pixel, cov_class1, means_class1, numVar);
    p2 = predict(pixel, cov_class2, means_class2, numVar);
    p3 = predict(pixel, cov_class3, means_class3, numVar);
    p4 = predict(pixel, cov_class4, means_class4, numVar);
    P = [p1, p2, p3, p4];
    [M, I] = max(P);
    res3(i) = I;
end
%%
res1_plot = reshape(res1, [512, 512]).';
figure;
imshow(res1_plot,[]);

res2_plot = reshape(res2, [512, 512]).';
figure;
imshow(res2_plot,[]);

res3_plot = reshape(res3, [512, 512]).';
figure;
imshow(res3_plot,[]);

%% Acuracy and Confusion matrix




